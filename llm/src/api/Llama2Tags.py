# Importing necessary classes
from llm.src.conf.Configurations import logger, default_prompt1, default_prompt2
from llm.src.utilities.Llama2Pipeline import Llama2Pipeline


def llama2_chat_ggu_question_answering(context: str, questions: list[str]):
    """
    Perform question answering using the Llama2ChatGGUF model.
    :param context: The context in which to answer the question.
    :param questions: List of questions to answer.
    :return: The answers generated by the Llama2ChatGGUF model.
    """
    logger.info("Received a request to perform question answering using Llama2ChatGGUF model")

    # Load the Llama2 GGUF model
    logger.info("Loading Llama2 GGUF model")
    llm = Llama2Pipeline().get_llm_model()

    # Enforcing that the model should strictly answer from context or say "I don't know"
    prompt = f"""<s> [INST] <<SYS>>{default_prompt2}<</SYS >>
    ###Context: {context}\n
    ###Questions: {questions}[/INST]"""

    # Generate the response using invoke
    logger.info(f"Generating response for questions: {questions}")
    response = llm.invoke(prompt)

    return response


if __name__ == "__main__":
    # Sample context and question
    sample_context = "The capital of France is Paris. The Eiffel Tower is located in Paris."
    sample_questions = ["What is the capital of France?", "What is the capital of Germany?"]

    # Perform question answering using the Llama2ChatGGUF model
    res = llama2_chat_ggu_question_answering(sample_context, sample_questions)

    # Print the response
    print("res",res)
